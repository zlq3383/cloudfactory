<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neuedu.mapper.ProductTypeMapper" >
  <resultMap id="BaseResultMap" type="com.neuedu.pojo.ProductType" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, flag, create_time, create_userid, update_time, update_userid, product_type_name, 
    parent_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.neuedu.pojo.ProductTypeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_product_type
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_product_type
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_product_type
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.pojo.ProductTypeExample" >
    delete from t_product_type
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.pojo.ProductType" >
    insert into t_product_type (id, flag, create_time, 
      create_userid, update_time, update_userid, 
      product_type_name, parent_id)
    values (#{id,jdbcType=INTEGER}, #{flag,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createUserid,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, #{updateUserid,jdbcType=INTEGER}, 
      #{productTypeName,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.pojo.ProductType" >
    insert into t_product_type
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUserid != null" >
        create_userid,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateUserid != null" >
        update_userid,
      </if>
      <if test="productTypeName != null" >
        product_type_name,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserid != null" >
        #{createUserid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserid != null" >
        #{updateUserid,jdbcType=INTEGER},
      </if>
      <if test="productTypeName != null" >
        #{productTypeName,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.pojo.ProductTypeExample" resultType="java.lang.Integer" >
    select count(*) from t_product_type
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_product_type
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.flag != null" >
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserid != null" >
        create_userid = #{record.createUserid,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUserid != null" >
        update_userid = #{record.updateUserid,jdbcType=INTEGER},
      </if>
      <if test="record.productTypeName != null" >
        product_type_name = #{record.productTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.parentId != null" >
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_product_type
    set id = #{record.id,jdbcType=INTEGER},
      flag = #{record.flag,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_userid = #{record.createUserid,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_userid = #{record.updateUserid,jdbcType=INTEGER},
      product_type_name = #{record.productTypeName,jdbcType=VARCHAR},
      parent_id = #{record.parentId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.pojo.ProductType" >
    update t_product_type
    <set >
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserid != null" >
        create_userid = #{createUserid,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserid != null" >
        update_userid = #{updateUserid,jdbcType=INTEGER},
      </if>
      <if test="productTypeName != null" >
        product_type_name = #{productTypeName,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.pojo.ProductType" >
    update t_product_type
    set flag = #{flag,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_userid = #{createUserid,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_userid = #{updateUserid,jdbcType=INTEGER},
      product_type_name = #{productTypeName,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 通过parentid获取所有数据 -->
  <resultMap type="ProductType" id="findAllProTypeByIdsMap">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
  	<association property="parent" javaType="ProductType" select="selectByPrimaryKey" column="parent_id"></association>
  	<association property="createUser" javaType="User" select="com.neuedu.mapper.UserMapper.selectByPrimaryKey" column="create_userid"></association>
  	<association property="updateUser" javaType="User" select="com.neuedu.mapper.UserMapper.selectByPrimaryKey" column="update_userid"></association>
  	<collection property="children" select="findChildrenById" column="id"></collection>
  </resultMap>
  <select id="findAllProTypeByIds" parameterType="int" resultMap="findAllProTypeByIdsMap">
  select <include refid="Base_Column_List" />
  from t_product_type
  <where>
  	<if test="ids != null and ids.length>0">
	  	id IN
	  	<foreach collection="ids" index="index" item="item"
	             open="(" separator="," close=")">
	        #{item}
	    </foreach>
  	</if>
  </where>
  </select>
  
  <!-- 根据id获取所有子类 -->
  <select id="findChildrenById" parameterType="int" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type
  	where parent_id=#{value}
  </select>
  
  <!-- 获取所有产品类别及其子类 -->
  <resultMap type="ProductType" id="findProTypeAndChildrenMap">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <collection property="children" select="findChildrenById" column="id"></collection>
    </resultMap>
  <select id="findProTypeAndChildren" resultMap="findProTypeAndChildrenMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type 
  	where parent_id is null
  </select>
  
  <!-- 根据id获取所有子类,只包括有效的 -->
  <select id="findChildrenByIdValid" parameterType="int" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type
  	where parent_id=#{value} and flag=0
  </select>
  
  <!-- 获取所有产品类别及其子类,只包括有效的 -->
  <resultMap type="ProductType" id="findProTypeAndChildrenValidMap">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <collection property="children" select="findChildrenByIdValid" column="id"></collection>
    </resultMap>
  <select id="findProTypeAndChildrenValid" resultMap="findProTypeAndChildrenValidMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type 
  	where parent_id is null and flag=0
  </select>
  
  <!-- 获取所有一级分类 -->
  <select id="findOneClassProType" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type 
  	where parent_id is null
  </select>
  
  <!-- 获取所有一级分类,只包括有效的-->
  <select id="findOneClassProTypeValid" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type 
  	where parent_id is null and flag=0
  </select>
  
  <!-- 批量增加产品类别 -->
  <insert id="addProTypeList">
   insert into t_product_type (product_type_name,parent_id,create_userid,create_time) values
     <foreach collection="list" item="item" separator=",">
        (#{item.productTypeName},#{item.parentId},#{item.createUserid},#{item.createTime})
      </foreach>
  </insert>
  
  <!-- 修改产品类别信息 -->
    <update id="updateProType" parameterType="ProductType" >
    update t_product_type
    <set >
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserid != null" >
        update_userid = #{updateUserid,jdbcType=INTEGER},
      </if>
      <if test="productTypeName != null" >
        product_type_name = #{productTypeName,jdbcType=VARCHAR},
      </if>
        parent_id = #{parentId,jdbcType=INTEGER},
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 批量删除   获取根据产品类别Id数组,获取产品类别以及子类别下的产品所对应的不能删除订单 -->
  <resultMap type="ProductType" id="selectProOrdersByIdsMap">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
   	<collection property="children" select="selectChildrenAndProductsById" column="id"></collection>
   	<collection property="products" select="com.neuedu.mapper.ProductMapper.selectProductsByProTypeId" column="id"></collection>
  </resultMap>
  <select id="selectProOrdersByIds" resultMap="selectProOrdersByIdsMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type 
  	where
  	<if test="ids != null and ids.length>0">
	  	id IN
	  	<foreach collection="ids" index="index" item="item"
	             open="(" separator="," close=")">
	        #{item}
	    </foreach>
  	</if>
  </select>
  
  <!-- 删除          获取根据产品类别Id数组,获取产品类别以及子类别下的产品所对应的不能删除订单-->
  <resultMap type="ProductType" id="selectProOrdersByIdMap">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
   	<collection property="children" select="selectChildrenAndProductsById" column="id"></collection>
   	<collection property="products" select="com.neuedu.mapper.ProductMapper.selectProductsByProTypeId" column="id"></collection>
  </resultMap>
  <select id="selectProOrdersById" resultMap="selectProOrdersByIdMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type 
  	where id=#{value}
  </select>
  
  <!-- 根据id获取所有子类以及子类对应的产品所对应的不能删除订单-->
  <resultMap type="ProductType" id="selectChildrenAndProductsByIdMap">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_userid" property="updateUserid" jdbcType="INTEGER" />
    <result column="product_type_name" property="productTypeName" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
   	<collection property="products" select="com.neuedu.mapper.ProductMapper.selectProductsByProTypeId" column="id"></collection>
  </resultMap>
  <select id="selectChildrenAndProductsById" parameterType="int" resultMap="selectChildrenAndProductsByIdMap">
  	select <include refid="Base_Column_List" />
  	from t_product_type
  	where parent_id=#{value}
  </select>
  
  <!-- 删除产品类型 -->
  <update id="deleteProType" parameterType="int">
    update t_product_type set flag=1 where id = #{value}
  </update>
  
  <!-- 删除产品类型的子类 -->
  <update id="deleteProTypeChildren" parameterType="int">
    update t_product_type set flag=1 where parent_id = #{value}
  </update>
</mapper>